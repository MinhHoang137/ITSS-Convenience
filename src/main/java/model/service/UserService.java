package model.service;

import model.entity.Role;
import model.entity.User;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Service x·ª≠ l√Ω c√°c thao t√°c li√™n quan ƒë·∫øn ng∆∞·ªùi d√πng.
 */
public class UserService extends BaseService implements IUserService {

    /**
     * ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng theo t√™n ƒëƒÉng nh·∫≠p.
     *
     * @param username t√™n ƒëƒÉng nh·∫≠p
     * @return ƒë·ªëi t∆∞·ª£ng {@link User} n·∫øu t√¨m th·∫•y, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ null
     */
    @Override
    public User login(String username) {
        String sql = "SELECT * FROM User WHERE username = ?";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setGroupId(rs.getInt("groupId"));
                user.setRole(Role.fromString(rs.getString("role")));
                System.out.println("üßæ Sau ƒëƒÉng nh·∫≠p: " + user.getUsername() + ", role = " + user.getRole());
                return user;
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi ƒëƒÉng nh·∫≠p: " + e.getMessage());
        } finally {
            closeConnection();
        }
        return null;
    }

    /**
     * ƒêƒÉng k√Ω t√†i kho·∫£n ng∆∞·ªùi d√πng m·ªõi.
     *
     * @param username t√™n ƒëƒÉng nh·∫≠p
     * @return true n·∫øu ƒëƒÉng k√Ω th√†nh c√¥ng, ng∆∞·ª£c l·∫°i false
     */
    @Override
    public boolean register(String username) {
        if (checkUserExists(username)) return false;

        String sql = "INSERT INTO User (username, role) VALUES (?, 'member')";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setString(1, username);
            return ps.executeUpdate() > 0;
        } catch (SQLException e) {
            System.err.println("L·ªói khi ƒëƒÉng k√Ω: " + e.getMessage());
        } finally {
            closeConnection();
        }
        return false;
    }

    /**
     * Ki·ªÉm tra ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a.
     *
     * @param username t√™n ƒëƒÉng nh·∫≠p
     * @return true n·∫øu ƒë√£ t·ªìn t·∫°i, ng∆∞·ª£c l·∫°i false
     */
    private boolean checkUserExists(String username) {
        String sql = "SELECT id FROM User WHERE username = ?";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            System.err.println("L·ªói ki·ªÉm tra username: " + e.getMessage());
        } finally {
            closeConnection();
        }
        return true;
    }

    /**
     * L·∫•y ng∆∞·ªùi d√πng theo ID.
     *
     * @param userId ID ng∆∞·ªùi d√πng
     * @return ƒë·ªëi t∆∞·ª£ng {@link User} n·∫øu t·ªìn t·∫°i, ng∆∞·ª£c l·∫°i null
     */
    @Override
    public User getUserById(int userId) {
        String sql = "SELECT * FROM User WHERE id = ?";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setInt(1, userId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setGroupId(rs.getInt("groupId"));
                user.setRole(Role.fromString(rs.getString("role")));
                return user;
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi l·∫•y user theo ID: " + e.getMessage());
        } finally {
            closeConnection();
        }
        return null;
    }

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng, lo·∫°i tr·ª´ role ADMIN.
     *
     * @return danh s√°ch {@link User}
     */
    @Override
    public List<User> getAllUsers() {
        List<User> users = new ArrayList<>();
        String sql = "SELECT * FROM user WHERE role != 'ADMIN'";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
                user.setGroupId(rs.getInt("groupId"));
                user.setRole(Role.valueOf(rs.getString("role")));
                users.add(user);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            closeConnection();
        }
        return users;
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng.
     *
     * @param user ƒë·ªëi t∆∞·ª£ng {@link User} c·∫ßn c·∫≠p nh·∫≠t
     * @return true n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng, ng∆∞·ª£c l·∫°i false
     */
    public boolean updateUser(User user) {
        String sql = "UPDATE user SET role = ?, groupId = ? WHERE id = ?";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setString(1, user.getRole().name());
            ps.setInt(2, user.getGroupId());
            ps.setInt(3, user.getId());
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            closeConnection();
        }
    }

    /**
     * X√≥a ng∆∞·ªùi d√πng theo ID.
     *
     * @param id ID ng∆∞·ªùi d√πng
     * @return true n·∫øu x√≥a th√†nh c√¥ng, ng∆∞·ª£c l·∫°i false
     */
    public boolean deleteUserById(int id) {
        String sql = "DELETE FROM user WHERE id = ?";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setInt(1, id);
            return ps.executeUpdate() > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        } finally {
            closeConnection();
        }
    }

    /**
     * ƒê·∫øm s·ªë l∆∞·ª£ng ng∆∞·ªùi c√≥ vai tr√≤ HOUSEWIFE trong m·ªôt nh√≥m.
     *
     * @param groupId ID nh√≥m
     * @return s·ªë l∆∞·ª£ng housewife trong nh√≥m
     */
    public int countHousewivesInGroup(int groupId) {
        String sql = "SELECT COUNT(*) FROM user WHERE groupId = ? AND role = 'HOUSEWIFE'";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ps.setInt(1, groupId);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            closeConnection();
        }
        return 0;
    }

    /**
     * L·∫•y ID ng∆∞·ªùi d√πng l·ªõn nh·∫•t hi·ªán c√≥ trong b·∫£ng.
     *
     * @return ID l·ªõn nh·∫•t, ho·∫∑c -1 n·∫øu l·ªói
     */
    @Override
    public int getMaxUserId() {
        String sql = "SELECT MAX(id) FROM User";
        try {
            connection = getConnection();
            PreparedStatement ps = connection.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                return rs.getInt(1);
            }
        } catch (SQLException e) {
            System.err.println("L·ªói khi l·∫•y ID ng∆∞·ªùi d√πng l·ªõn nh·∫•t: " + e.getMessage());
        } finally {
            closeConnection();
        }
        return -1;
    }
}
